
import pandas as pd


orders = pd.read_csv("orders.csv")  # replace with actual file path
products = pd.read_csv("products.csv")  # replace with actual file path

# 定义分类列的预期值
expected_categories = {
    'order_status': ['Pending', 'Shipped', 'Cancelled', 'Returned'],
    'product_category': ['A', 'B', 'C', 'D'],
    # Add more categories as required
}

# 检查每个分类列是否有意外值
for column, expected_values in expected_categories.items():
    if column in orders.columns:
        unexpected_values = orders[~orders[column].isin(expected_values)][column].unique()
        if len(unexpected_values) > 0:
            print(f"Unexpected values in {column}: {unexpected_values}")
    if column in products.columns:
        unexpected_values = products[~products[column].isin(expected_values)][column].unique()
        if len(unexpected_values) > 0:
            print(f"Unexpected values in {column}: {unexpected_values}")
# 定义合理的价格和数量范围
price_limits = (0, 10000)  
quantity_limits = (1, 100)  

price_issues = orders[(orders['price'] < price_limits[0]) | (orders['price'] > price_limits[1])]
quantity_issues = orders[(orders['quantity'] < quantity_limits[0]) | (orders['quantity'] > quantity_limits[1])]

print(f"Orders with price issues:\n{price_issues}")
print(f"Orders with quantity issues:\n{quantity_issues}")

# 定义合理的日期范围
min_date = pd.Timestamp("2013-01-01")
max_date = pd.Timestamp("2023-12-31")


orders['order_date'] = pd.to_datetime(orders['order_date'], errors='coerce')
orders['delivery_date'] = pd.to_datetime(orders['delivery_date'], errors='coerce')
# 检查订单表和产品表之间的连接完整性
date_issues = orders[(orders['order_date'] < min_date) | (orders['order_date'] > max_date)]
print(f"Orders with date issues:\n{date_issues}")


delivery_issues = orders[orders['delivery_date'] < orders['order_date']]
print(f"Orders with delivery date issues (delivery before order):\n{delivery_issues}")


merged_data = pd.merge(orders, products, on="product_id", how="left", indicator=True)
missing_products = merged_data[merged_data['_merge'] == 'left_only']
print(f"Orders with missing product information:\n{missing_products[['order_id', 'product_id']]}")


duplicate_orders = orders[orders.duplicated(['order_id'], keep=False)]
duplicate_products = products[products.duplicated(['product_id'], keep=False)]
print(f"Duplicate orders:\n{duplicate_orders}")
print(f"Duplicate products:\n{duplicate_products}")

